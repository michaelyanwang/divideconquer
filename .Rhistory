ncvsurv
debug(ncvsurv)
tmpfit = ncvsurv(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
nlambda
lambda
nlambda
lambda
res <- .Call("cdfit_cox_dh", XX, Delta, penalty, lambda,
eps, as.integer(max.iter), as.double(gamma), penalty.factor,
alpha, as.integer(dfmax), as.integer(user.lambda | any(penalty.factor ==
0)), as.integer(warn))
convex.min <- if (convex)
convexMin(b, XX, penalty, gamma, lambda * (1 - alpha),
"cox", penalty.factor, Delta = Delta)
else NULL
convex.min <- if (convex)
convexMin(b, XX, penalty, gamma, lambda * (1 - alpha),
"cox", penalty.factor, Delta = Delta)
else NULL
convex.min <- if (convex)
convexMin(b, XX, penalty, gamma, lambda * (1 - alpha),
"cox", penalty.factor, Delta = Delta)
else NULL
convexMin(b, XX, penalty, gamma, lambda * (1 - alpha),
"cox", penalty.factor, Delta = Delta)
convex
convex.min
convex.min <- if (convex)
convexMin(b, XX, penalty, gamma, lambda * (1 - alpha),
"cox", penalty.factor, Delta = Delta)
else NULL
convex.min <- if (convex)
{convexMin(b, XX, penalty, gamma, lambda * (1 - alpha),
"cox", penalty.factor, Delta = Delta)}
else{ NULL}
beta <- matrix(0, nrow = ncol(X), ncol = length(lambda))
bb <- b/attr(XX, "scale")[ns]
beta[ns, ] <- bb
offset <- -crossprod(attr(XX, "center")[ns], bb)
varnames <- if (is.null(colnames(X)))
paste("V", 1:ncol(X), sep = "")
else colnames(X)
dimnames(beta) <- list(varnames, lamNames(lambda))
lamNames
?lamNames
debug(lamNames)
dimnames(beta) <- list(varnames, lamNames(lambda))
-log10(-max(diff(l)))
diff(l)
-max(diff(l))
ncvsurv
rm(list=ls())
gc()
library(divideconquer)
library(divideconquer)
rm(list=ls())
gc()
taskid = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
if (is.na(taskid)){
taskid = 10
setwd('/media/qnap/Yan/dac/simulation/')
require(divideconquer)
}else{
require(divideconquer,lib.loc='/n/home05/yaw719/apps/R/')
}
set.seed(taskid)
############## Parameter Setup ##################
N = 1e6; p.x = 50; K = 100; n = N/K;  cor = 0.2;  lambda.grid = 10^seq(-10,3,0.01); rtn.setup='Score+A+Approx';
bb = c(rep(0.8, 3), rep(0.4, 3), rep(0.2, 3))
beta0 = c(1, bb, rep(0, p.x - length(bb)))
tmpfn = paste("sim_N",N,"K",K,"p",p.x,'_TASK',taskid,".RData",sep="")
## Gen Data; Divide Data
dat.mat0 = SIM.FUN(N, p.x = p.x, cor = cor, family='Cox',beta0 = beta0)
dat.list = lapply(1:K,function(kk){dat.mat0[1:n+(kk-1)*n,]});
gc()
bhat.BIC.all = matrix(NA, nrow = K, ncol = dim(dat.list[[1]])[2]-2)
lambda.BIC = rep(NA,K)
kk=1
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
rm(list=ls())
gc()
library(divideconquer)
library(divideconquer)
rm(list=ls())
gc()
taskid = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
if (is.na(taskid)){
taskid = 10
setwd('/media/qnap/Yan/dac/simulation/')
require(divideconquer)
}else{
require(divideconquer,lib.loc='/n/home05/yaw719/apps/R/')
}
set.seed(taskid)
############## Parameter Setup ##################
N = 1e6; p.x = 50; K = 100; n = N/K;  cor = 0.2;  lambda.grid = 10^seq(-10,3,0.01); rtn.setup='Score+A+Approx';
bb = c(rep(0.8, 3), rep(0.4, 3), rep(0.2, 3))
beta0 = c(1, bb, rep(0, p.x - length(bb)))
tmpfn = paste("sim_N",N,"K",K,"p",p.x,'_TASK',taskid,".RData",sep="")
## Gen Data; Divide Data
dat.mat0 = SIM.FUN(N, p.x = p.x, cor = cor, family='Cox',beta0 = beta0)
dat.list = lapply(1:K,function(kk){dat.mat0[1:n+(kk-1)*n,]});
gc()
bhat.BIC.all = matrix(NA, nrow = K, ncol = dim(dat.list[[1]])[2]-2)
lambda.BIC = rep(NA,K)
kk=1
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
?usenamespace
?UseNamespace
rm(list=ls())
gc()
library(divideconquer)
rm(list=ls())
gc()
taskid = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
if (is.na(taskid)){
taskid = 10
setwd('/media/qnap/Yan/dac/simulation/')
require(divideconquer)
}else{
require(divideconquer,lib.loc='/n/home05/yaw719/apps/R/')
}
set.seed(taskid)
############## Parameter Setup ##################
N = 1e6; p.x = 50; K = 100; n = N/K;  cor = 0.2;  lambda.grid = 10^seq(-10,3,0.01); rtn.setup='Score+A+Approx';
bb = c(rep(0.8, 3), rep(0.4, 3), rep(0.2, 3))
beta0 = c(1, bb, rep(0, p.x - length(bb)))
tmpfn = paste("sim_N",N,"K",K,"p",p.x,'_TASK',taskid,".RData",sep="")
## Gen Data; Divide Data
dat.mat0 = SIM.FUN(N, p.x = p.x, cor = cor, family='Cox',beta0 = beta0)
dat.list = lapply(1:K,function(kk){dat.mat0[1:n+(kk-1)*n,]});
gc()
bhat.BIC.all = matrix(NA, nrow = K, ncol = dim(dat.list[[1]])[2]-2)
lambda.BIC = rep(NA,K)
kk=1
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
rm(list=ls())
gc()
rm(list=ls())
gc()
taskid = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
if (is.na(taskid)){
taskid = 10
setwd('/media/qnap/Yan/dac/simulation/')
require(divideconquer)
}else{
require(divideconquer,lib.loc='/n/home05/yaw719/apps/R/')
}
set.seed(taskid)
############## Parameter Setup ##################
N = 1e6; p.x = 50; K = 100; n = N/K;  cor = 0.2;  lambda.grid = 10^seq(-10,3,0.01); rtn.setup='Score+A+Approx';
bb = c(rep(0.8, 3), rep(0.4, 3), rep(0.2, 3))
beta0 = c(1, bb, rep(0, p.x - length(bb)))
tmpfn = paste("sim_N",N,"K",K,"p",p.x,'_TASK',taskid,".RData",sep="")
## Gen Data; Divide Data
dat.mat0 = SIM.FUN(N, p.x = p.x, cor = cor, family='Cox',beta0 = beta0)
dat.list = lapply(1:K,function(kk){dat.mat0[1:n+(kk-1)*n,]});
gc()
library(divideconquer)
bhat.BIC.all = matrix(NA, nrow = K, ncol = dim(dat.list[[1]])[2]-2)
lambda.BIC = rep(NA,K)
kk=1
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
rm(list=ls())
gc()
library(divideconquer)
rm(list=ls())
gc()
taskid = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
if (is.na(taskid)){
taskid = 10
setwd('/media/qnap/Yan/dac/simulation/')
require(divideconquer)
}else{
require(divideconquer,lib.loc='/n/home05/yaw719/apps/R/')
}
set.seed(taskid)
############## Parameter Setup ##################
N = 1e6; p.x = 50; K = 100; n = N/K;  cor = 0.2;  lambda.grid = 10^seq(-10,3,0.01); rtn.setup='Score+A+Approx';
bb = c(rep(0.8, 3), rep(0.4, 3), rep(0.2, 3))
beta0 = c(1, bb, rep(0, p.x - length(bb)))
tmpfn = paste("sim_N",N,"K",K,"p",p.x,'_TASK',taskid,".RData",sep="")
## Gen Data; Divide Data
dat.mat0 = SIM.FUN(N, p.x = p.x, cor = cor, family='Cox',beta0 = beta0)
dat.list = lapply(1:K,function(kk){dat.mat0[1:n+(kk-1)*n,]});
gc()
bhat.BIC.all = matrix(NA, nrow = K, ncol = dim(dat.list[[1]])[2]-2)
lambda.BIC = rep(NA,K)
kk=1
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
dimnames(tmpfit$beta)
plot(log(tmpfit$lambda,tmpfit$loss))
plot(log(tmpfit$lambda),tmpfit$loss)
dev = tmpfit$loss
dev = 2*tmpfit$loss
BIC.lam = dev+log(N.adj)*tmpfit$df
N.adj = sum(dat.list[[kk]][,2])
BIC.lam = dev+log(N.adj)*tmpfit$df
m.opt = which.min(BIC.lam); bhat.BIC = tmpfit$beta[,m.opt]; lambda.BIC[kk] = lamhat = tmpfit$lambda[m.opt]
m.opt = which.min(BIC.lam);
dim(tmpfit$beta)
bhat.BIC = tmpfit$beta[,m.opt];
tmpfit$lambda
lambda.BIC[kk] = lamhat = tmpfit$lambda[m.opt]
m.oopt
m.opt
colSums(tmpfit$beta!=0)
BIC.lam = dev+log(N.adj)*colSums(tmpfit$beta!=0)
m.opt = which.min(BIC.lam); bhat.BIC = tmpfit$beta[,m.opt]; lambda.BIC[kk] = lamhat = tmpfit$lambda[m.opt]
bhat.BIC.all[kk,] = bhat.BIC
bhat.BIC.all[1,]
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid, eps = 1e-6)
N.adj = sum(dat.list[[kk]][,2])
dev = 2*tmpfit$loss
BIC.lam = dev+log(N.adj)*colSums(tmpfit$beta!=0)
m.opt = which.min(BIC.lam); bhat.BIC = tmpfit$beta[,m.opt]; lambda.BIC[kk] = lamhat = tmpfit$lambda[m.opt]
bhat.BIC.all[kk,] = bhat.BIC
plot(log(tmpfit$lambda),BIC.lam)
bhat.BIC.all[kk,]
names(tmpfit)
for (kk in 1:K){
tmpfit = ncvsurv2(X = dat.list[[kk]][,-c(1,2),drop=F], y = cbind(dat.list[[kk]][,1],dat.list[[kk]][,2]),
penalty = 'MCP', lambda = lambda.grid)
gc()
N.adj = sum(dat.list[[kk]][,2])
dev = 2*tmpfit$loss
### BIC
BIC.lam = dev+log(N.adj)*colSums(tmpfit$beta!=0)
m.opt = which.min(BIC.lam); bhat.BIC = tmpfit$beta[,m.opt]; lambda.BIC[kk] = lamhat = tmpfit$lambda[m.opt]
bhat.BIC.all[kk,] = bhat.BIC
print(kk);gc()
}
mvpct = 0.5
ind = colMeans(bhat.BIC.all!=0)>mvpct
beta_xiemcp.BIC = rep(0, dim(dat.list[[1]])[2]-2)
beta_xiemcp.BIC[ind] = colMeans(bhat.BIC.all[,ind])
beta_xiemcp.BIC
list(beta=beta_xiemcp.BIC)
rm(list=ls())
gc()
library(divideconquer)
library(divideconquer)
SIM.FUN
library(divideconquer)
library(divideconquer)
library(divideconquer)
convexMin
ncvreg:::convexMin
setupLambdaCox
ncvreg:::setupLambdaCox
SIM.FUN()
SIM.FUN
rm(list=ls())
gc()
setwd('/media/qnap/Yan/dac/simulation/simTVC_1_2_time')
require(divideconquer)
############## Parameter Setup ##################
n.subject = 1e6; p.ti = 50; p.tv = 50; K = 100; n = n.subject/K; cor = 0.8;  lambda.grid = 10^seq(-10,3,0.01);
beta0.ti = NULL
beta0.tv = NULL
taskid=11
set.seed(taskid)
dat.mat0 = SIM.FUN.TVC(p.ti, p.tv, n.subject, cor, beta0.ti, beta0.tv)
dat.list = lapply(1:K,function(kk){dat.mat0[dat.mat0[,dim(dat.mat0)[2]] %in% ((1:n)+(kk-1)*n),-dim(dat.mat0)[2]]});
gc()
min(dat.mat0[,2]-dat.mat0[,1])
SIM.FUN.TVC
sqrt(.Machine$double.eps)
cor
### Round 1
ptm = proc.time()
bini = coxph(Surv(dat.list[[1]][,1],dat.list[[1]][,2],dat.list[[1]][,3])~dat.list[[1]][,-c(1,2,3)])$coef
update1 = iteration.fun.cox3(dat.list=dat.list,bini=bini,kk.list=1:K);
bnew1 = apply(update1$b.k,1,mean);
time1.0 = proc.time() - ptm;gc();print(time1.0[3])
ptm = proc.time()
info1  = -update1$Ahat
Ahalf1 = svd(-update1$Ahat); Ahalf1 = Ahalf1$u%*%diag(sqrt(Ahalf1$d))%*%t(Ahalf1$v);
bhat1.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf1%*%bnew1,Ahalf1,bnew1,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time1.1 = proc.time() - ptm;gc();print(time1.1[3])
### Round 2
ptm = proc.time()
update2 = iteration.fun.cox3(dat.list=dat.list,bini=bnew1,kk.list=1:K);
bnew2 = apply(update2$b.k,1,mean)
time2.0 = proc.time() - ptm;gc();print(time2.0[3])
ptm = proc.time()
info2  = -update2$Ahat
Ahalf2 = svd(-update2$Ahat); Ahalf2 = Ahalf2$u%*%diag(sqrt(Ahalf2$d))%*%t(Ahalf2$v);
bhat2.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf2%*%bnew2,Ahalf2,bnew2,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time2.1 = proc.time() - ptm;gc();print(time2.1[3])
### Round 3
ptm = proc.time()
update3 = iteration.fun.cox3(dat.list=dat.list,bini=bnew2,kk.list=1:K);
bnew3 = apply(update3$b.k,1,mean)
time3.0 = proc.time() - ptm;gc();print(time3.0[3])
ptm = proc.time()
info3 = -update3$Ahat
Ahalf3 = svd(-update3$Ahat); Ahalf3 = Ahalf3$u%*%diag(sqrt(Ahalf3$d))%*%t(Ahalf3$v);
bhat3.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf3%*%bnew3,Ahalf3,bnew3,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time3.1 = proc.time() - ptm;gc();print(time3.1[3])
### Round 4
ptm = proc.time()
update4 = iteration.fun.cox3(dat.list=dat.list,bini=bnew3,kk.list=1:K);
bnew4 = apply(update4$b.k,1,mean)
time4.0 = proc.time() - ptm;gc();print(time4.0[3])
ptm = proc.time()
info4 = -update4$Ahat
Ahalf4 = svd(-update4$Ahat); Ahalf4 = Ahalf4$u%*%diag(sqrt(Ahalf4$d))%*%t(Ahalf4$v);
bhat4.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf4%*%bnew4,Ahalf4,bnew4,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time4.1 = proc.time() - ptm;gc();print(time4.1[3])
### Round 5
ptm = proc.time()
update5 = iteration.fun.cox3(dat.list=dat.list,bini=bnew4,kk.list=1:K);
bnew5 = apply(update5$b.k,1,mean)
time5.0 = proc.time() - ptm;gc();print(time5.0[3])
ptm = proc.time()
info5 = -update5$Ahat
Ahalf5 = svd(-update5$Ahat); Ahalf5 = Ahalf5$u%*%diag(sqrt(Ahalf5$d))%*%t(Ahalf5$v);
bhat5.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf5%*%bnew5,Ahalf5,bnew5,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time5.1 = proc.time() - ptm;gc();print(time5.1[3])
rm(list=c('bini','update1','update2','update3','update4','update5',
'bnew1','bnew2','bnew3','bnew4','bnew5',
'Ahalf1','Ahalf2','Ahalf3','Ahalf4','Ahalf5',
'bhat1.DCOS','bhat2.DCOS','bhat3.DCOS','bhat4.DCOS','bhat5.DCOS'))
gc()
rm(dat.list);gc()
bini = coxph(Surv(dat.mat0[,1],dat.mat0[,2],dat.mat0[,3])~dat.mat0[,-c(1,2,3,dim(dat.mat0)[2])])$coef
summary(dat.mat0[,2]-dat.mat0[,1])
min(dat.mat0[,2]-dat.mat0[,1])
sqrt(.Machine$double.eps)
debug(aeqSurv)
bini = coxph(Surv(dat.mat0[,1],dat.mat0[,2],dat.mat0[,3])~dat.mat0[,-c(1,2,3,dim(dat.mat0)[2])])$coef
zeros
findInterval
cuts
head(x)
x[1550419,]
x[1550419]
as.vector(x[1550419])
a=as.vector(x[1550419])
a[2]-a[1]
head(y)
dim(x)
3324026*2
a=c(x[, -ncol(x)]))
a=c(x[, -ncol(x)])
a[100]
y[100]
y[1000]
y[10000]
y[100000]
y[20000]
y[60000]
y[70000]
y[65000]
y[62500]
y[63250]
which(y==1)
y[63054]
y[63054]-y[63053]
head(dy)
min(dy)
sum(tied)
head(z)
summary(z[m2])
summary(z[,2])
?findInterval
x[1,1:2]
head(cuts)
z[63054]
z[1550419]
x[1550419,]
cuts[62886]
cuts[62886]-1
cuts[62887]-1
cuts[62885]-1
findInterval
y[62887]
y[62886]
y[62888]
y <- sort(unique(c(x[, -ncol(x)])))
y <- y[is.finite(y)]
dy <- diff(y)
tied <- ((dy <= tolerance) | ((dy/mean(abs(y)) <= tolerance)))
head(tied)
head(dy)
min(dy)
tolerance
cuts <- y[c(TRUE, !tied)]
head(cuts)
length(cut)
length(cuts)
cuts[62886]
cuts[62887]
cuts[62888]
dy[1550419]
length(dy)
length(y)
y[62887]
y[62888]
length(y)
y[62886]
cuts[62886]
cuts[62887]
rm(list=ls())
gc()
1+1e-==1
1+1e-8==1
1+1e-9==1
aeqSurv
library(divideconquer)

rm(list=ls())
gc()
setwd('/media/qnap/Yan/dac/simulation/simTVC_1_2_time')
require(divideconquer)
############## Parameter Setup ##################
n.subject = 1e6; p.ti = 50; p.tv = 50; K = 100; n = n.subject/K; cor = 0.8;  lambda.grid = 10^seq(-10,3,0.01);
beta0.ti = NULL
beta0.tv = NULL
taskid=1
taskid=11
set.seed(taskid)
dat.mat0 = SIM.FUN.TVC(p.ti, p.tv, n.subject, cor, beta0.ti, beta0.tv)
dat.list = lapply(1:K,function(kk){dat.mat0[dat.mat0[,dim(dat.mat0)[2]] %in% ((1:n)+(kk-1)*n),-dim(dat.mat0)[2]]});
gc()
xx[1550419,]
dat.mat0[1550419,]
dat.mat0[1550419,2]-dat.mat0[1550419,1]
bini = coxph(Surv(dat.mat0[,1],dat.mat0[,2],dat.mat0[,3])~dat.mat0[,-c(1,2,3,dim(dat.mat0)[2])])$coef
plot(bini)
q()
rm(list=ls())
gc()
setwd('/media/qnap/Yan/dac/simulation/simTVC_1_2_time')
require(divideconquer)
############## Parameter Setup ##################
n.subject = 1e6; p.ti = 50; p.tv = 50; K = 100; n = n.subject/K; cor = 0.8;  lambda.grid = 10^seq(-10,3,0.01);
beta0.ti = NULL
beta0.tv = NULL
taskid=11
set.seed(taskid)
dat.mat0 = SIM.FUN.TVC(p.ti, p.tv, n.subject, cor, beta0.ti, beta0.tv)
dat.list = lapply(1:K,function(kk){dat.mat0[dat.mat0[,dim(dat.mat0)[2]] %in% ((1:n)+(kk-1)*n),-dim(dat.mat0)[2]]});
gc()
### Round 1
ptm = proc.time()
bini = coxph(Surv(dat.list[[1]][,1],dat.list[[1]][,2],dat.list[[1]][,3])~dat.list[[1]][,-c(1,2,3)])$coef
update1 = iteration.fun.cox3(dat.list=dat.list,bini=bini,kk.list=1:K);
bnew1 = apply(update1$b.k,1,mean);
time1.0 = proc.time() - ptm;gc();print(time1.0[3])
ptm = proc.time()
info1  = -update1$Ahat
Ahalf1 = svd(-update1$Ahat); Ahalf1 = Ahalf1$u%*%diag(sqrt(Ahalf1$d))%*%t(Ahalf1$v);
bhat1.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf1%*%bnew1,Ahalf1,bnew1,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time1.1 = proc.time() - ptm;gc();print(time1.1[3])
### Round 2
ptm = proc.time()
update2 = iteration.fun.cox3(dat.list=dat.list,bini=bnew1,kk.list=1:K);
bnew2 = apply(update2$b.k,1,mean)
time2.0 = proc.time() - ptm;gc();print(time2.0[3])
ptm = proc.time()
info2  = -update2$Ahat
Ahalf2 = svd(-update2$Ahat); Ahalf2 = Ahalf2$u%*%diag(sqrt(Ahalf2$d))%*%t(Ahalf2$v);
bhat2.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf2%*%bnew2,Ahalf2,bnew2,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time2.1 = proc.time() - ptm;gc();print(time2.1[3])
### Round 3
ptm = proc.time()
update3 = iteration.fun.cox3(dat.list=dat.list,bini=bnew2,kk.list=1:K);
bnew3 = apply(update3$b.k,1,mean)
time3.0 = proc.time() - ptm;gc();print(time3.0[3])
ptm = proc.time()
info3 = -update3$Ahat
Ahalf3 = svd(-update3$Ahat); Ahalf3 = Ahalf3$u%*%diag(sqrt(Ahalf3$d))%*%t(Ahalf3$v);
bhat3.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf3%*%bnew3,Ahalf3,bnew3,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time3.1 = proc.time() - ptm;gc();print(time3.1[3])
### Round 4
ptm = proc.time()
update4 = iteration.fun.cox3(dat.list=dat.list,bini=bnew3,kk.list=1:K);
bnew4 = apply(update4$b.k,1,mean)
time4.0 = proc.time() - ptm;gc();print(time4.0[3])
ptm = proc.time()
info4 = -update4$Ahat
Ahalf4 = svd(-update4$Ahat); Ahalf4 = Ahalf4$u%*%diag(sqrt(Ahalf4$d))%*%t(Ahalf4$v);
bhat4.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf4%*%bnew4,Ahalf4,bnew4,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time4.1 = proc.time() - ptm;gc();print(time4.1[3])
### Round 5
ptm = proc.time()
update5 = iteration.fun.cox3(dat.list=dat.list,bini=bnew4,kk.list=1:K);
bnew5 = apply(update5$b.k,1,mean)
time5.0 = proc.time() - ptm;gc();print(time5.0[3])
ptm = proc.time()
info5 = -update5$Ahat
Ahalf5 = svd(-update5$Ahat); Ahalf5 = Ahalf5$u%*%diag(sqrt(Ahalf5$d))%*%t(Ahalf5$v);
bhat5.DCOS = Est.ALASSO.Approx.GLMNET(Ahalf5%*%bnew5,Ahalf5,bnew5,N.adj=sum(dat.mat0[,2]),lambda.grid=lambda.grid,N.inflate = dim(dat.mat0)[1])
time5.1 = proc.time() - ptm;gc();print(time5.1[3])
rm(list=c('bini','update1','update2','update3','update4','update5',
'bnew1','bnew2','bnew3','bnew4','bnew5',
'Ahalf1','Ahalf2','Ahalf3','Ahalf4','Ahalf5',
'bhat1.DCOS','bhat2.DCOS','bhat3.DCOS','bhat4.DCOS','bhat5.DCOS'))
gc()
rm(dat.list);gc()
bini = coxph(Surv(dat.mat0[,1],dat.mat0[,2],dat.mat0[,3])~dat.mat0[,-c(1,2,3,dim(dat.mat0)[2])])$coef
plot(bini)
q()
